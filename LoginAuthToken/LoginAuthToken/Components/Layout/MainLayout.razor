@using LoginAuthToken.Client.Models
@using System.Net.Http.Json
@using LoginAuthToken.Services

@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IHttpContextAccessor HttpContextAccessor
@inject HttpClient Http
@inject UserSessionService UserSession


<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
       @*  <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div> *@

        <div class="top-row px-4" style="display:flex; justify-content:flex-end;">
            <span>IP: @(string.IsNullOrEmpty(ip) ? "No disponible" : ip)</span>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    [SupplyParameterFromForm]
    private IpConfig ? LoginReq { get; set; }
    public string? ip { get; set; }

    [Inject] private ILogger<MainLayout> Logger { get; set; } = default!;

 
    protected override async Task OnInitializedAsync()
    {
        // Suscribirse a cambios de UserSession
        UserSession.OnChange += async () => await InvokeAsync(StateHasChanged);

        if (!string.IsNullOrEmpty(UserSession.ClientIp))
        {
            ip = UserSession.ClientIp;
            Logger.LogInformation("MainLayout usa UserSession.ClientIp: " + ip);
        }
        else
        {
            var result = await Http.GetFromJsonAsync<IpConfig>("api/IpConfig/current");
            ip = result?.Ip ?? "No disponible";
            Logger.LogInformation("MainLayout usa Session.Server: " + ip);
        }
    }

    public void Dispose()
    {
        UserSession.OnChange -= async () => await InvokeAsync(StateHasChanged);
    }


   
}

