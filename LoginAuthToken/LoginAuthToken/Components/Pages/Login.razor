@page "/"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using System.Net.Http.Json
@using LoginAuthToken.Client.Layout
@using LoginAuthToken.Client.ViewModels
@using System.Xml.Linq
@using LoginAuthToken.Services
@using static LoginAuthToken.Client.ViewModels.LoginViewModel

@layout EmptyLayoutLogin

@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation


<div id="animated-background"></div>

<div class="login-container">
    <div class="login-card">
        <h1 class="mb-3">Welcome!</h1>
        <p>Enter your IP to connect to the project:</p>


        <EditForm Model="LoginReq" OnValidSubmit="HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="ipInput" class="form-label">IP:</label>
                <InputText id="ipInput" @bind-Value="LoginReq.Ip" class="form-control" placeholder="Ej: 192.168.1.10" />
                <ValidationMessage For="() => LoginReq.Ip" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Connect</button>

        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger mt-2">@errorMessage</p>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private IpConfig LoginReq { get; set; } = new();

    private string? errorMessage;
    private bool _isBrowser;
    private string? ipToStore;

    public bool Valid { get; set; }
    [Inject] private ILogger<Login> Logger { get; set; } = default!;
    [Inject] private UserSessionService UserSession { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return; // Execute only on first render

        try
        {

            // 🔹 Initialize Trianglify background only on login page
            await InvokeAsync(() =>
                                 JS.InvokeVoidAsync("trianglifyHelper.generateCanvas")
                             );
            // 🔹 Optional: save IP to localStorage if pending
            // if (!string.IsNullOrEmpty(ipToStore))
            // {
            //     await JS.InvokeVoidAsync("clientStorage.setIp", ipToStore);
            //     Logger.LogInformation("[Login] IP saved to localStorage: " + ipToStore);
            //     ipToStore = null; // Reset so it won't run again
            // }
        }
        catch (Exception ex)
        {
            Logger.LogError("Trianglify initialization error: " + ex.Message);
        }
    }

    private async Task HandleLogin()
    {

        if (string.IsNullOrWhiteSpace(LoginReq.Ip))
        {
            errorMessage = "Debes introducir una IP válida.";
            return;
        }

        var response = await Http.PostAsJsonAsync("api/IpConfig/validate", new IpConfig { Ip = LoginReq.Ip });
        var result = await response.Content.ReadFromJsonAsync<ValidateIpResultViewModel>();

        if (result == null || !result.Valid)
        {
            errorMessage = "IP no autorizada.";
            return;
        }

        // Guardar en servicio local
        UserSession.ClientIp = LoginReq.Ip;
        Logger.LogInformation("IP guardada en UserSession: " + LoginReq.Ip);

        // Guardar también en Session del servidor
        await Http.PostAsJsonAsync("api/IpConfig/save", new IpConfig { Ip = LoginReq.Ip });

        // Redirigir
        await InvokeAsync(() => Navigation.NavigateTo($"/home/{LoginReq.Ip}"));
       
        
    }
}
