@page "/"
@using System.Net.Http.Json
@using LoginAuthToken.Client.Layout
@using LoginAuthToken.Client.Models
@using System.Xml.Linq
@using LoginAuthToken.Services

@layout EmptyLayout

@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation


<div id="animated-background"></div>

<div class="login-container">
    <div class="login-card">
        <h1 class="mb-3">Welcome!</h1>
        <p>Enter your IP to connect to the project:</p>


        <EditForm Model="LoginReq" OnValidSubmit="HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="ipInput" class="form-label">IP:</label>
                <InputText id="ipInput" @bind-Value="LoginReq.Ip" class="form-control" placeholder="Ej: 192.168.1.10" />
                <ValidationMessage For="() => LoginReq.Ip" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Connect</button>

        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger mt-2">@errorMessage</p>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private IpConfig LoginReq { get; set; } = new();

    private string? errorMessage;
    private bool _isBrowser;
    private string? ipToStore;

    public bool Valid { get; set; }
    [Inject] private ILogger<Login> Logger { get; set; } = default!;
    [Inject] private UserSessionService UserSession { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("trianglifyHelper.generarCanvas", new
                {
                    width = 800,
                    height = 600,
                    cellSize = 75,
                    variance = 0.75,
                    xColors = "random",
                    yColors = "match"
                }, "animated-background");

                // // Guardar IP en localStorage solo si hay una pendiente
                // if (!string.IsNullOrEmpty(ipToStore))
                // {
                //     await JS.InvokeVoidAsync("clientStorage.setIp", ipToStore);
                //     Logger.LogInformation("[Login] IP guardada en localStorage: " + ipToStore);

                //     ipToStore = null; // Reset para no ejecutar de nuevo
                // }

               
            }
            catch (Exception ex)
            {
                Logger.LogError("Error trianglify: " + ex.Message);
            }
        }
    }

    private async Task HandleLogin()
    {

        if (string.IsNullOrWhiteSpace(LoginReq.Ip))
        {
            errorMessage = "Debes introducir una IP válida.";
            return;
        }

        var response = await Http.PostAsJsonAsync("api/IpConfig/validate", new IpConfig { Ip = LoginReq.Ip });
        var result = await response.Content.ReadFromJsonAsync<ValidateIpResult>();

        if (result == null || !result.Valid)
        {
            errorMessage = "IP no autorizada.";
            return;
        }

        // Guardar en servicio local
        UserSession.ClientIp = LoginReq.Ip;
        Logger.LogInformation("IP guardada en UserSession: " + LoginReq.Ip);

        // Guardar también en Session del servidor
        await Http.PostAsJsonAsync("api/IpConfig/save", new IpConfig { Ip = LoginReq.Ip });

        // Redirigir
        await InvokeAsync(() => Navigation.NavigateTo($"/home/{LoginReq.Ip}"));
       
        
    }
}
