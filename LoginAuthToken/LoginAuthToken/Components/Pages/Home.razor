@page "/home"
@using LoginAuthToken.LocalStorage
@using LoginAuthToken.Services

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject UserSessionService UserSession
@inject LocalStorageHelper localStorageHelper
@inject NavigationManager Navigation
@inject IJSRuntime JS

@if (!IsAuthorized)
{
    <ErrorPage ErrorCode="401" />
}
else
{
    <div class="home-background"></div>


}

@code {
    private bool IsAuthorized;
    [Parameter] public string? ip { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // Cargar sesión desde memoria o LocalStorage
        var hasSession = await UserSession.LoadSessionAsync(localStorageHelper);

        if (hasSession)
        {
            // Redirige a /home/{ip} si hay sesión
            Navigation.NavigateTo($"/home/{UserSession.ClientIp}");
        }
        else
        {
            // Redirige a /home si no hay sesión
            Navigation.NavigateTo("/home");
        }
        
        // Validar autorización
        IsAuthorized = UserSession.IsAuthorized(ip);

        StateHasChanged();
    }
}
