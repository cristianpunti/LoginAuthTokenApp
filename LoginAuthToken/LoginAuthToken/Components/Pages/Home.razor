@page "/home/{ip}"
@using LoginAuthToken.LocalStorage
@using LoginAuthToken.Services

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject UserSessionService UserSession
@inject LocalStorageHelper localStorageHelper
@inject NavigationManager Navigation
@inject IJSRuntime JS

@if (!IsAuthorized)
{
    <ErrorPage ErrorCode="401" />
}
else
{
    <div class="home-background"></div>

   
}

@code {
    [Parameter] public string? ip { get; set; }
    private bool IsAuthorized;

    protected override async Task OnParametersSetAsync()
    {
        await JS.InvokeVoidAsync("trianglifyHelper.generateCanvas");

        // Si UserSession está vacío, leer desde LocalStorage
        if (string.IsNullOrEmpty(UserSession.ClientIp))
            UserSession.ClientIp = await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageIpKey);

        if (string.IsNullOrEmpty(UserSession.Token))
            UserSession.Token = await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageTokenKey);

        // Verificar autorización: hay token y la IP de la URL coincide
        IsAuthorized = !string.IsNullOrEmpty(UserSession.Token)
                       && !string.IsNullOrEmpty(UserSession.ClientIp)
                       && ip?.Trim() == UserSession.ClientIp?.Trim();
    }

    private async Task Logout()
    {
        // Limpiar sesión y LocalStorage
        UserSession.ClientIp = null;
        UserSession.Token = null;
        await localStorageHelper.RemoveItemAsync(ProjectConstants.LocalStorageIpKey);
        await localStorageHelper.RemoveItemAsync(ProjectConstants.LocalStorageTokenKey);

        IsAuthorized = false;

        Navigation.NavigateTo("/weather", forceLoad: true);
    }
}
