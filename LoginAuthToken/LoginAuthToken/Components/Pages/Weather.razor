@page "/weather"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@layout EmptyLayoutLogin

@using System.Net.Http.Json
@using LoginAuthToken.Client.Layout
@using LoginAuthToken.Client.ViewModels
@using LoginAuthToken.Shared.Models
@using LoginAuthToken.Shared.Services
@using LoginAuthToken.Shared.LocalStorage 

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject UserSessionService UserSession
@inject LocalStorageHelper localStorageHelper
@inject ILogger<Weather> Logger

<div id="animated-background"></div>

<div class="login-container">
    <div class="login-card">
        <h1 class="mb-3">Welcome to Weather Demo!</h1>
        <p>Enter your IP:</p>

        <EditForm Model="LoginReq" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <InputText @bind-Value="LoginReq.Ip" class="form-control" placeholder="e.g., 192.168.1.10" />
                <ValidationMessage For="() => LoginReq.Ip" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Connect</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(LoginResult))
        {
            <p class="text-danger mt-2">@LoginResult</p>
        }
    </div>
</div>

@code {
    private IpConfigViewModel LoginReq { get; set; } = new();
    private string? LoginResult;

    private HttpClient Api => HttpClientFactory.CreateClient("ExternalApi");


    protected override async Task OnInitializedAsync()
    {
        var savedIp = await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageIpKey);
        var savedToken = await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageTokenKey);

        if (!string.IsNullOrEmpty(UserSession.ClientIp ?? savedIp) &&
            !string.IsNullOrEmpty(UserSession.Token ?? savedToken))
        {
            // Sesión activa → redirigir a Home automáticamente
            Navigation.NavigateTo("/home", forceLoad: true);
            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        try
        {
            await JS.InvokeVoidAsync("trianglifyHelper.generateCanvas");
        }
        catch (Exception ex)
        {
            Logger.LogError("Trianglify error: {Message}", ex.Message);
        }
    }

    private async Task HandleLogin()
    {
        LoginResult = null;

        if (string.IsNullOrWhiteSpace(LoginReq.Ip))
        {
            LoginResult = "You must enter a valid IP.";
            return;
        }

        try
        {
            var payload = LoginReq.Ip;
            var response = await Api.PostAsJsonAsync("api/login", payload); 
            var content = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();

                // Aquí asumimos que el contenido devuelto es tu token JWT
                UserSession.SetSession(LoginReq.Ip, token);


                await localStorageHelper.SaveItemAsync(ProjectConstants.LocalStorageIpKey, LoginReq.Ip);
                await localStorageHelper.SaveItemAsync(ProjectConstants.LocalStorageTokenKey, content);

                Logger.LogInformation("Login successful. IP: {Ip}", LoginReq.Ip);
                Navigation.NavigateTo("/home", forceLoad: true);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                LoginResult = $"Http Error: 404 - {content.Trim()}";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                LoginResult = $"{content.Trim()}";
            }
            else
            {
                LoginResult = $"Unexpected error ({(int)response.StatusCode}): {content.Trim()}";
            }
          }
    catch (TaskCanceledException)
    {
            LoginResult = "Request timeout: API did not respond.";
    }
    catch (HttpRequestException)
    {
            LoginResult = "API unreachable or offline.";
    }
    catch (Exception ex)
    {
            LoginResult = $"Unexpected error: {ex.Message}";
    }
  }
}
