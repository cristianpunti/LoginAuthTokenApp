@page "/weather"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@layout EmptyLayoutLogin
@using System.Net.Http.Json
@using LoginAuthToken.Client.Layout
@using LoginAuthToken.Client.ViewModels
@using System.Xml.Linq
@using LoginAuthToken.Services
@using LoginAuthToken.LocalStorage

@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject UserSessionService sessionService
@inject LocalStorageHelper localStorageHelper


@inject ILogger<Weather> Logger

<div id="animated-background"></div>

<div class="login-container">
    <div class="login-card">
        <h1 class="mb-3">Weather API Login</h1>
        <p>Enter your IP to connect to the API:</p>

        <EditForm Model="LoginReq" OnValidSubmit="HandleLogin" FormName="WeatherLoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="ipInput" class="form-label">IP:</label>
                <InputText id="ipInput" @bind-Value="LoginReq.Ip" class="form-control" placeholder="Ej: 192.168.1.10" />
                <ValidationMessage For="() => LoginReq.Ip" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Connect</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger mt-2">@errorMessage</p>
        }
        @if (!string.IsNullOrEmpty(LoginResult))
        {
            <p class="text-danger mt-2">@LoginResult</p>
        }

        @* @if (!string.IsNullOrEmpty(sessionService.Token))
        {
            <h2>Conectado correctamente!</h2>
            <p>Token recibido:</p>
            <textarea class="form-control" readonly rows="3">@sessionService.Token</textarea>
            <p>IP: @sessionService.ClientIp </p>
        } *@
    </div>
</div>
@code {
    private IpConfigViewModel LoginReq { get; set; } = new();
    // {
    //     Ip = "192.168.1.10" // Valor por defecto para pruebas
    // };

    private string? LoginResult;
    // public string? Token { get; set; }
    public string? ClientIp { get; set; }
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return; // Execute only on first render

        try
        {
            // 🔹 Initialize Trianglify background only on login page
            await JS.InvokeVoidAsync("trianglifyHelper.generateCanvas");

            // 🔹 Optional: save IP to localStorage if pending
            // if (!string.IsNullOrEmpty(ipToStore))
            // {
            //     await JS.InvokeVoidAsync("clientStorage.setIp", ipToStore);
            //     Logger.LogInformation("[Login] IP saved to localStorage: " + ipToStore);
            //     ipToStore = null; // Reset so it won't run again
            // }
        }
        catch (Exception ex)
        {
            Logger.LogError("Trianglify initialization error: " + ex.Message);
        }
    }
    private async Task HandleLogin()
    {
        LoginResult = null;

        if (string.IsNullOrWhiteSpace(LoginReq.Ip))
        {
            LoginResult = "Debes introducir una IP válida.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/login", LoginReq.Ip);

            // Leer contenido de la respuesta aunque no sea 200
            var content = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                // Login OK → recibimos token
                sessionService.Token = content;
                sessionService.ClientIp = LoginReq.Ip;

                await localStorageHelper.SaveItemAsync(ProjectConstants.LocalStorageTokenKey, sessionService.Token);
                await localStorageHelper.SaveItemAsync(ProjectConstants.LocalStorageIpKey, sessionService.ClientIp);

                Logger.LogInformation("[Weather] Login correcto. Token guardado en LocalStorage para IP: {Ip}", LoginReq.Ip);

                Navigation.NavigateTo($"/home/{LoginReq.Ip}");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                // API devolvió "ip not found"
                LoginResult = $"Http Error: {content}";
            }
            else
            {
                LoginResult = $"Error en la API: {content}";
            }
        }
        catch (Exception ex)
        {
            LoginResult = $"Error de conexión: {ex.Message}";
            Logger.LogError(ex, "[Weather] Error al conectar con la API");
        }
    }
}