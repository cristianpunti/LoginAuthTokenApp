﻿
@page "/counter"

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using LoginAuthToken.Services
@using LoginAuthToken.LocalStorage

@inject UserSessionService UserSession
@inject LocalStorageHelper localStorageHelper
@inject NavigationManager Navigation

@if (!IsAuthorized)
{
    <ErrorPage ErrorCode="401" />
}
else
{
    <h3>Counter</h3>

    <p>Current count: @currentCount</p>

    <div class="mb-3">
        <button class="btn btn-primary me-2" @onclick="IncrementCount">Click me</button>
    </div>
}

@code {
    private bool IsAuthorized;
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        // Leer sesión en memoria o desde LocalStorage
        var clientIp = UserSession.ClientIp ?? await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageIpKey);
        var token = UserSession.Token ?? await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageTokenKey);

        UserSession.ClientIp = clientIp;
        UserSession.Token = token;

        // Validación → basta con que haya IP + Token
        IsAuthorized = !string.IsNullOrEmpty(clientIp)
                       && !string.IsNullOrEmpty(token);

        StateHasChanged();
    }
}
