@page "/error/{ErrorCode:int?}"

@using LoginAuthToken.Shared.Services
@using LoginAuthToken.Shared.LocalStorage 
@using Microsoft.Extensions.Logging

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject NavigationManager Navigation
@inject UserSessionService UserSession
@inject LocalStorageHelper localStorageHelper
@inject IJSRuntime JS
@inject ILogger<ErrorPage> Logger

<div class="d-flex flex-column justify-content-center align-items-center vh-100 text-center">
    <h1 class="display-3 text-danger">@Title</h1>
    <p class="lead">@Message</p>

    @if (ErrorCode == 504 || !UserSession.ApiOnline)
    {
        <p>The API is unreachable. Please try again later.</p>
    }
    else if (!IsLoggedIn)
    {
        <button class="btn btn-primary" @onclick="GoLogin">Go back to login</button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="GoHome">Go to Home</button>
    }
</div>

@code {
    [Parameter] public int? ErrorCode { get; set; }

    // Recoger detalle de la API desde la query string
    [Parameter]
    [SupplyParameterFromQuery(Name = "apiDetail")]
    public string? ApiDetail { get; set; }

    private string Title = "Error";
    private string Message = "An error has occurred.";
    private bool IsLoggedIn = false;
    private string Route => Navigation.ToAbsoluteUri(Navigation.Uri).Query.Contains("route=")
       ? System.Web.HttpUtility.ParseQueryString(Navigation.ToAbsoluteUri(Navigation.Uri).Query).Get("route") ?? string.Empty
       : string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        // Comprobar sesión en memoria
        var inMemoryLogged = !string.IsNullOrEmpty(UserSession?.ClientIp)
                             && !string.IsNullOrEmpty(UserSession?.Token);

        // Comprobar LocalStorage
        var savedIp = await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageIpKey);
        var savedToken = await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageTokenKey);

        var inStorageLogged = !string.IsNullOrEmpty(savedIp) && !string.IsNullOrEmpty(savedToken);

        IsLoggedIn = inMemoryLogged || inStorageLogged;

        var code = ErrorCode ?? 404;

        // Decodificar detalle de API
        var detailText = Uri.UnescapeDataString(ApiDetail ?? "");

        // Configurar título y mensaje según código
        switch (code)
        {
            case 401:
                Title = $"Http Error:  {code} - {detailText}";
                Message = "You do not have permission to access this page.";
                break;

            case 404:
                Title = $"Http Error:  {code} - {(!string.IsNullOrEmpty(detailText) ? detailText : "Not Found")}";
                Message = !string.IsNullOrEmpty(detailText)
                    ? detailText
                    : string.IsNullOrEmpty(Route)
                        ? "The page you are looking for does not exist."
                        : $"The page '{Route}' you are looking for does not exist.";
                break;

            case 500:
                Title = $"Http Error:  {code} - Internal Server Error";
                Message = !string.IsNullOrEmpty(detailText) ? detailText : "An unexpected error occurred on the server.";
                break;

            case 504:
                Title = $"Http Error: {code} - Gateway Timeout";
                Message = !string.IsNullOrEmpty(detailText) ? detailText : "The API is unreachable or took too long to respond.";
                break;

            default:
                Title = $"Error {code}";
                Message = "An unexpected error has occurred.";
                break;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("trianglifyHelper.removeCanvas");
            }
            catch (Exception ex)
            {
                Logger.LogError("Trianglify generation error: " + ex.Message);
            }
        }
    }

    private async Task GoLogin()
    {
        // Limpiar sesión en memoria
        UserSession.ClientIp = null;
        UserSession.Token = null;

        // Limpiar LocalStorage
        await localStorageHelper.RemoveItemAsync(ProjectConstants.LocalStorageIpKey);
        await localStorageHelper.RemoveItemAsync(ProjectConstants.LocalStorageTokenKey);

        Navigation.NavigateTo("/", forceLoad: true);
    }

    private void GoHome()
    {
        if (!string.IsNullOrEmpty(UserSession.ClientIp))
            Navigation.NavigateTo($"/home", forceLoad: true);
        else
            Navigation.NavigateTo("/", forceLoad: true);
    }
}
