@page "/home/{ip}"
@using LoginAuthToken.LocalStorage
@using LoginAuthToken.Services

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject UserSessionService UserSession
@inject LocalStorageHelper localStorageHelper
@inject NavigationManager Navigation
@inject IJSRuntime JS

@if (!IsAuthorized)
{
    <ErrorPage ErrorCode="401" />
}
else
{
    <div class="home-background"></div>

   
}

@code {
    [Parameter] public string? ip { get; set; }
    private bool IsAuthorized;

    protected override async Task OnParametersSetAsync()
    {
        // Cargar sesión
        await UserSession.LoadSessionAsync(localStorageHelper);

        if (string.IsNullOrEmpty(ip) && !string.IsNullOrEmpty(UserSession.ClientIp))
        {
            // Si no hay IP en la URL pero hay sesión → redirige automáticamente
            Navigation.NavigateTo($"/home/{UserSession.ClientIp}", forceLoad: false);
            return;
        }

        // Validar autorización
        IsAuthorized = UserSession.IsAuthorized(ip);

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || !IsAuthorized) return;

        try
        {
            // Generar canvas Trianglify
            await JS.InvokeVoidAsync("trianglifyHelper.generateCanvas");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error generando canvas Trianglify: " + ex.Message);
        }
    }
}
