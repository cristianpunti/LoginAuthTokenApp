@page "/home/{ip}"
@using LoginAuthToken.LocalStorage
@using LoginAuthToken.Services

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject UserSessionService UserSession
@inject LocalStorageHelper localStorageHelper
@inject NavigationManager Navigation
@inject IJSRuntime JS

@if (!IsAuthorized)
{
    <ErrorPage ErrorCode="401" />
}
else
{
    <div class="home-background"></div>

   
}

@code {
    [Parameter] public string? ip { get; set; }
    private bool IsAuthorized;

    protected override async Task OnParametersSetAsync()
    {
        await JS.InvokeVoidAsync("trianglifyHelper.generateCanvas");

        // Leer sesión en memoria o LocalStorage
        var clientIp = UserSession.ClientIp ?? await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageIpKey);
        var token = UserSession.Token ?? await localStorageHelper.GetItemAsync(ProjectConstants.LocalStorageTokenKey);

        UserSession.ClientIp = clientIp;
        UserSession.Token = token;

        // Validación
        IsAuthorized = !string.IsNullOrEmpty(clientIp)
                       && !string.IsNullOrEmpty(token)
                       && ip?.Trim() == clientIp?.Trim();

        StateHasChanged(); // fuerza re-render para que ErrorPage aparezca si no autorizado
    }   
}
